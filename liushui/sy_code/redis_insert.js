#!/root/code/tools/node/node4.x64
'use strict'
var os = require('os')
var patt = /linux/i
var father = 'D:'
if (patt.test(os.type())) {
    father = '/root'
}
var redis = require(father + '/code/node_modules/redis')
var cluster = require('cluster')
var conn = redis.createClient({
    host: '192.168.16.102',
    port: 6379,
    db: 0,
})

conn.on('error', function (err) {
    console.log(err)
})

var uid = 'liushui:ceping:uid:'
var value = '2019-03-21 12:12:12'
var onecount = 600000
var maxworker = 5
var pos = 0
var pn = ['name' , 'key', 'good_job']
pn = 'pt_redis_5_anniversary_signin'

var key = [
"2019-01-01",
"2019-01-02",
"2019-01-03",
"2019-01-04",
"2019-01-05",
"2019-01-06",
"2019-01-07",
"2019-01-08",
"2019-01-09",
"2019-01-10",
"2019-01-11",
"2019-01-12",
"2019-01-13",
"2019-01-14",
"2019-01-15",
"2019-01-16",
"2019-01-17",
"2019-01-18",
"2019-01-19",
"2019-01-20",
"2019-01-21",
"2019-01-22",
"2019-01-23",
"2019-01-24",
"2019-01-25",
"2019-01-26",
"2019-01-27",
"2019-01-28",
"2019-01-29",
"2019-01-30",
"2019-01-31",
"2019-02-01",
"2019-02-02",
"2019-02-03",
"2019-02-04",
"2019-02-05",
"2019-02-06",
"2019-02-07",
"2019-02-08",
"2019-02-09",
"2019-02-10",
"2019-02-11",
"2019-02-12",
"2019-02-13",
"2019-02-14",
"2019-02-15",
"2019-02-16",
"2019-02-17",
"2019-02-18",
"2019-02-19",
"2019-02-20",
"2019-02-21",
"2019-02-22",
"2019-02-23",
"2019-02-24",
"2019-02-25",
"2019-02-26",
"2019-02-27",
"2019-02-28",
"2019-03-01",
"2019-03-02",
"2019-03-03",
"2019-03-04",
"2019-03-05",
"2019-03-06",
"2019-03-07",
"2019-03-08",
"2019-03-09",
"2019-03-10",
"2019-03-11",
"2019-03-12",
"2019-03-13",
"2019-03-14",
"2019-03-15",
"2019-03-16",
"2019-03-17",
"2019-03-18",
"2019-03-19",
"2019-03-20",
"2019-03-21",
"2019-03-22",
"2019-03-23",
"2019-03-24",
"2019-03-25",
"2019-03-26",
"2019-03-27",
"2019-03-28",
"2019-03-29",
"2019-03-30",
"2019-03-31",
"2019-04-01",
"2019-04-02",
"2019-04-03",
"2019-04-04",
"2019-04-05",
"2019-04-06",
"2019-04-07",
"2019-04-08",
"2019-04-09",
"2019-04-10",
"2019-04-11",
"2019-04-12",
"2019-04-13",
"2019-04-14",
"2019-04-15",
"2019-04-16",
"2019-04-17",
"2019-04-18",
"2019-04-19",
"2019-04-20",
"2019-04-21",
"2019-04-22",
"2019-04-23",
"2019-04-24",
"2019-04-25",
"2019-04-26",
"2019-04-27",
"2019-04-28",
"2019-04-29",
"2019-04-30",
"2019-05-01",
"2019-05-02",
"2019-05-03",
"2019-05-04",
"2019-05-05",
"2019-05-06",
"2019-05-07",
"2019-05-08",
"2019-05-09",
"2019-05-10",
"2019-05-11",
"2019-05-12",
"2019-05-13",
"2019-05-14",
"2019-05-15",
"2019-05-16",
"2019-05-17",
"2019-05-18",
"2019-05-19",
"2019-05-20",
"2019-05-21",
"2019-05-22",
"2019-05-23",
"2019-05-24",
"2019-05-26",
"2019-05-27",
"2019-05-28",
"2019-05-29",
"2019-05-30",
"2019-05-31",
"2019-06-01",
"2019-06-02",
"2019-06-03",
"2019-06-04",
"2019-06-05",
"2019-06-06",
"2019-05-25",
"2019-06-07",
"2019-06-08",
]

var oneman = 
{ '1': '1',
  '2': '2',
  '3': '3',
  '4': '4',
  '5': '5',
  pt_login20190824: 6,
  pt_login20190825: 6,
  pt_login20190826: 6,
  pt_login20190827: 6,
  pt_login20190828: 6,
  pt_login20190820: 6,
  pt_login20190819: 6,
  pt_login20190816: 6,
  pt_login20190815: 6,
  pt_login20190814: 6,
  pt_login20190813: 6,
  pt_login20190812: 6,
  pt_login20190811: 6,
  pt_login20190810: 6,
  pt_login20190809: 6,
  pt_login20190808: 6,
  pt_login20190807: 6,
  pt_login20190805: 6,
  pt_login20190804: 6,
  pt_login20190803: 6,
  pt_login20190905: 6,
  pt_login20190806: 6,
  pt_login20190802: 6,
  pt_login20190801: 6,
  pt_login20190731: 6 }


var main_insert = function () {
	// pn[1]='key'+ cluster.worker.id +pos

	for(let i=0;i<onecount;i++) {
		let k = cluster.worker.id + ':' + i + ':10007'
		let val = JSON.stringify(oneman)
		// console.log(k,val)
		conn.hset(pn , k, val, function(err, res) {
			console.log(i)

		})	
		// conn.hset(pn , key, JSON.stringify(val), function(err, res) {

		// })	
	}
	

    // conn.hmset(pn,function (err, ret) {
    //     pos++
    //     if (pos < onecount) {
    //         main_insert()
    //     } else {
    //         conn.quit()
    //         process.send('ok')
    //         console.log(pos, '--', cluster.worker.id)
    //     }
    // })


}

var run_worker = function () {
    main_insert()
    return
}


var run_master = function () {
    //   const numCPUs = require('os').cpus().length;
    for (var i = 0; i < maxworker; i++) {
        cluster.fork();
    }

    var back_worker = 0;
    function messageHandler(msg) {
        if (msg && msg === 'ok') {
            back_worker++
            console.log(back_worker)
            if(back_worker>=maxworker){
                process.exit(0)

            }
        }
    }


    for (const id in cluster.workers) {
        cluster.workers[id].on('message', messageHandler);
    }

}


if (cluster.isMaster) {
    run_master();

} else {

    run_worker();
}



